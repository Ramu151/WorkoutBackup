import React from "react";
import { pizzaConfig } from "./config";

let pizzaCategory = ["small", "medium", "large", "adult", "children"];
class Pizza extends React.Component {
  constructor() {
    super();
    this.state = {
      pizzaCategory: pizzaCategory,
      pizzaConfig: pizzaConfig,
      minTotal: 200,
      total: 200,
      smallPrice: 150,
      mediumPrice: 150,
      largePrice: 150
    };
    this.removePizza = this.removePizza.bind(this);
    this.addPizza = this.addPizza.bind(this);
    this.calculateTotal = this.calculateTotal.bind(this);
    this.maintainPizzaCategory = this.maintainPizzaCategory.bind(this);
  }

  //need to remove if total not less than minprice after removing a item
  removePizza() {}

  calculateTotal() {
    let newTotal = this.state.pizzaConfig.map(ele => {
      console.log(ele.price, ele.count);
      if (ele.type === "adult" || ele.type === "children") {
        return ele.price * 0;
      } else {
        return ele.price * ele.count;
      }
    });
    console.log("newTotal", newTotal);
    const newTot = newTotal.reduce((a, b) => {
      return a + b;
    });
    console.log("newTot", newTot);
    this.setState({ total: newTot });
  }

  //count 2 child as 1 adult, 2 adult 1 large
  //2 small 1 medium,
  maintainPizzaCategory(pizzaEle, eleIndex) {
    switch (pizzaEle.type) {
      case "small": {
        console.log("switch ", pizzaEle.type);
        if (pizzaEle.count === 2) {
          this.setState(state => {
            state.pizzaConfig[eleIndex].count = 0;
            state.pizzaConfig[eleIndex + 1].count += 1;
            state.pizzaConfig[3].count = 1;
          });
        } else {
          this.setState(state => {
            state.pizzaConfig[eleIndex].count = pizzaEle.count;

            state.pizzaConfig[4].count = 1;
          });
        }
        break;
      }
      case "medium": {
        console.log("switch medium", pizzaEle.count);
        if (pizzaEle.count === 2) {
          this.setState(state => {
            state.pizzaConfig[eleIndex].count = 0;
            state.pizzaConfig[eleIndex + 1].count = 1;
            state.pizzaConfig[3].count = 2;
            state.pizzaConfig[4].count = 0;
          });
        }
        break;
      }
      case "large": {
        console.log("switch ", pizzaEle.type);
        if (pizzaEle.count) {
          this.setState(state => {
            state.pizzaConfig[eleIndex].count = pizzaEle.count;
            state.pizzaConfig[eleIndex + 1].count = pizzaEle.count * 2;
            state.pizzaConfig[4].count = 0;
          });
        }
        break;
      }

      case "adult": {
        console.log("switch adult", pizzaEle.type);
        if (pizzaEle.count === 2) {
          this.setState(state => {
            state.pizzaConfig["large"].count = 1;
            state.pizzaConfig["medium"].count = 0;
          });
        }
        break;
      }
      case "children": {
        console.log("switch ", pizzaEle.type);
        if (pizzaEle.count === 2) {
          this.setState(state => {
            state.pizzaConfig["adult"].count = 1;
            state.pizzaConfig["medium"].count = 1;
            state.pizzaConfig[pizzaEle.type].count = 0;
          });
        }
        break;
      }
      default: {
        console.log("switch ", pizzaEle.type);
        break;
      }
    }
  }

  addPizza(pizzaEle) {
    let count = pizzaEle.count + 1;

    const eleIndex = this.state.pizzaConfig.findIndex(ele => {
      if (ele.type === pizzaEle.type) {
        return ele;
      }
    });
    const cbk = state => {
      this.maintainPizzaCategory(pizzaEle, eleIndex);
      //this.calculateTotal();
    };

    this.setState(state => {
      state.pizzaConfig[eleIndex].count = count;
    }, cbk);
  }

  render() {
    let renderElement = this.state.pizzaConfig.map(pizzaEle => {
      return (
        <section>
          <div className="w-100"> {pizzaEle.type} </div>
          <input
            element={pizzaEle.type}
            disabled={pizzaEle.disablePizzaRemoveState}
            onClick={this.removePizza(pizzaEle)}
            type="button"
            value="-"
          />
          <span> {pizzaEle.count} </span>
          <input
            disabled={pizzaEle.disablePizzaAddState}
            onClick={() => this.addPizza(pizzaEle)}
            type="button"
            value="+"
          />
        </section>
      );
    });

    console.log("render state value", this.state.pizzaConfig);
    return [
      <main>
        {renderElement}
        <div>total : {this.state.total}</div>
      </main>
    ];
  }
}

export { Pizza };
